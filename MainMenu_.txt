package com.example.chatapp;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Build;
import android.os.Vibrator;

import androidx.annotation.NonNull;
import androidx.core.app.NotificationCompat;

import com.google.firebase.messaging.RemoteMessage;

public class FirebaseMessagingService extends com.google.firebase.messaging.FirebaseMessagingService {

    NotificationManager mNotificationManager;
    SharedPreferences sharedPreferences;
    public String nToken;

    @Override
    public void onNewToken(@NonNull String s) {
        super.onNewToken(s);

        sharedPreferences = getSharedPreferences("SavedToken",MODE_PRIVATE);

        nToken = s;
        SharedPreferences.Editor tokenEdit = sharedPreferences.edit();

        tokenEdit.putString("ntoken",s);
        tokenEdit.commit();

    }

    @Override
    public void onMessageReceived(RemoteMessage remoteMessage) {
        super.onMessageReceived(remoteMessage);


        Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
        Ringtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);
        r.play();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            r.setLooping(false);
        }

        // vibration
        Vibrator v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
        long[] pattern = {100, 300};
        v.vibrate(pattern, -1);


        int resourceImage = getResources().getIdentifier(remoteMessage.getNotification().getIcon(), "drawable", getPackageName());



        NotificationCompat.Builder builder = new NotificationCompat.Builder(this, "CHANNEL_ID");
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            builder.setSmallIcon(resourceImage);
        } else {
            builder.setSmallIcon(resourceImage);
        }



        Intent resultIntent = new Intent(this, MainActivity.class);
        PendingIntent pendingIntent = PendingIntent.getActivity(this, 1, resultIntent, PendingIntent.FLAG_UPDATE_CURRENT);


        builder.setContentTitle(remoteMessage.getNotification().getTitle());
        builder.setContentText(remoteMessage.getNotification().getBody());
        builder.setContentIntent(pendingIntent);
        builder.setStyle(new NotificationCompat.BigTextStyle().bigText(remoteMessage.getNotification().getBody()));
        builder.setAutoCancel(true);
        builder.setPriority(Notification.PRIORITY_MAX);

        mNotificationManager =
                (NotificationManager) getApplicationContext().getSystemService(Context.NOTIFICATION_SERVICE);




        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
        {
            String channelId = "Your_channel_id";
            NotificationChannel channel = new NotificationChannel(
                    channelId,
                    "Channel human readable title",
                    NotificationManager.IMPORTANCE_HIGH);
            mNotificationManager.createNotificationChannel(channel);
            builder.setChannelId(channelId);
        }



// notificationId is a unique int for each notification that you must define
        mNotificationManager.notify(100, builder.build());


    }

}


SETTING.XML
SETTING.JAVA

package com.example.chatapp;

import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SearchView;

import com.example.chatapp.databinding.ActivityContactListsBinding;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;
import java.util.Date;

import models.UserModel;

public class ContactListsActivity extends AppCompatActivity {

    ActivityContactListsBinding activityContactListsBinding;
    FirebaseDatabase firebaseDatabase;
    FirebaseAuth firebaseAuth;
    ArrayList<UserModel> searchedUser = new ArrayList<>(1);


    @Override
    public void onBackPressed() {
        super.onBackPressed();
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if(getSupportActionBar()!=null){
            getSupportActionBar().hide();
        }

        activityContactListsBinding = ActivityContactListsBinding.inflate(getLayoutInflater());
        setContentView(activityContactListsBinding.getRoot());
        activityContactListsBinding.newUserDisplay.setVisibility(View.GONE);


        firebaseDatabase = FirebaseDatabase.getInstance();
        firebaseAuth = FirebaseAuth.getInstance();

        activityContactListsBinding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {

                activityContactListsBinding.searchView.clearFocus();
                searchedUser.clear();

              firebaseDatabase.getReference("Users").addValueEventListener(new ValueEventListener() {
                  @Override
                  public void onDataChange(@NonNull DataSnapshot snapshot) {

                      boolean flag = false;

                      for(DataSnapshot e : snapshot.getChildren()){

                                flag = e.getKey().equals(firebaseAuth.getCurrentUser().getUid());


                          Object userMailValue = e.child("userMail").getValue();
                          if (userMailValue != null && userMailValue.equals(query.trim())) {


                              Log.d("testcontact"," "+query+"  name= "+e.child("userName").getValue().toString());
                              UserModel userModel = new UserModel();
                              userModel.setUserName(e.child("userName").getValue().toString());

                              userModel.setUserId(e.getKey());
                              searchedUser.add(userModel);

                              activityContactListsBinding.userName.setText(e.child("userName").getValue().toString());
                              activityContactListsBinding.usermail.setText(e.child("userMail").getValue().toString());
                              String pic = e.child("profilePic").getValue().toString();
                              Picasso.get().load(pic)
                                      .fit()
                                      .centerCrop()
                                      .error(R.drawable.user)
                                      .placeholder(R.drawable.user)
                                      .into(activityContactListsBinding.profilePicImageview);

                              activityContactListsBinding.newUserDisplay.setVisibility(View.VISIBLE);

                              activityContactListsBinding.addContactBtn.setOnClickListener(new View.OnClickListener() {
                                  @Override
                                  public void onClick(View v) {

                                      Toast.makeText(ContactListsActivity.this, "Contact added", Toast.LENGTH_SHORT).show();

                                      String userId = searchedUser.get(0).getUserId();

                                      firebaseDatabase.getReference("Users").child(firebaseAuth.getCurrentUser().getUid())
                                              .child("Contacts").child(userId).setValue("Chats");
                                      searchedUser.clear();

                                      firebaseDatabase.getReference("Users").child(firebaseAuth.getUid()).child("Contacts").child(userId)
                                              .child("interactionTime").setValue(new Date().getTime());
                                      firebaseDatabase.getReference("Users").child(firebaseAuth.getUid()).child("Contacts").child(userId)
                                              .child("recentMessage").setValue("");



                                  }
                              });

                          }
                      }

                  }

                  @Override
                  public void onCancelled(@NonNull DatabaseError error) {
                      searchedUser.clear();
                  }
              });

                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                return false;
            }
        });





    }


}

CHATLIST-ITEMS.XML

FRAGEMENT-PROFILE.XML

FRAGEMENT-PROFILE.JAVA
package com.example.chatapp;

import static android.app.Activity.RESULT_OK;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;

import com.example.chatapp.databinding.FragmentProfileBinding;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;
import com.squareup.picasso.Picasso;
import com.theartofdev.edmodo.cropper.CropImage;
import com.theartofdev.edmodo.cropper.CropImageView;


public class ProfileFragment extends Fragment {

   FirebaseAuth firebaseAuth;
   FirebaseDatabase firebaseDatabase;
   FragmentProfileBinding binding;
   FragmentManager fragmentManager;
   FirebaseStorage firebaseStorage;

    public ProfileFragment() {
        // Required empty public constructor
    }



    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }



    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        binding = FragmentProfileBinding.inflate(inflater, container, false);
        fragmentManager = getChildFragmentManager();

        firebaseDatabase = FirebaseDatabase.getInstance();
        firebaseStorage = FirebaseStorage.getInstance();
        firebaseAuth = FirebaseAuth.getInstance();



        String uid = firebaseAuth.getUid();

        binding.uid.setText(uid);

        binding.username.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                binding.editFragContainer.setVisibility(View.VISIBLE);
                binding.editFragContainer.bringToFront();
                binding.uid.setVisibility(View.GONE);

                binding.text.setText("Enter new name");

                binding.edittext.requestFocus();
                binding.saveEditBtn.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String ss = binding.edittext.getText().toString().trim();

    firebaseDatabase.getReference("Users").child(firebaseAuth.getUid()).child("userName").setValue(ss)
            .addOnSuccessListener(new OnSuccessListener<Void>() {
                            @Override
                            public void onSuccess(Void unused) {

                                Toast.makeText(getContext(), "Username Edited ", Toast.LENGTH_SHORT).show();
                                binding.edittext.setText("");
                                binding.editFragContainer.setVisibility(View.GONE);
                            }
                        });



                    }
                });

            }
        });

        binding.about.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                binding.editFragContainer.setVisibility(View.VISIBLE);
                binding.editFragContainer.bringToFront();
                binding.uid.setVisibility(View.GONE);


                binding.text.setText("Enter about");
                binding.edittext.setHint("about");

                binding.edittext.requestFocus();
                binding.saveEditBtn.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String ss = binding.edittext.getText().toString().trim();

                        firebaseDatabase.getReference("Users").child(firebaseAuth.getUid()).child("about").setValue(ss);
                        binding.edittext.setText("");
                        binding.editFragContainer.setVisibility(View.GONE);

                    }
                });

            }
        });
        



        binding.newPic.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                 CropImage.activity()
                         .setAspectRatio(3,3)
                         .setGuidelines(CropImageView.Guidelines.ON)
                         .setFixAspectRatio(true).setOutputCompressQuality(60)
                        .start(getContext(),ProfileFragment.this);


            }
        });




                firebaseDatabase.getReference("Users").child(uid).addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                        String uName = snapshot.child("userName").getValue().toString();
                        String uMail = snapshot.child("userMail").getValue().toString();
                        String uPic = snapshot.child("profilePic").getValue().toString();
                        String uAbout = snapshot.child("about").getValue().toString();

                        Picasso.get().load(uPic).error(R.drawable.user)
                                .placeholder(R.drawable.user).centerCrop().fit()
                                .into(binding.profilePicImageview);

                        binding.username.setText(uName);
                        binding.usermail.setText(uMail);
                        binding.about.setText(uAbout);
                    }

                    @Override
                    public void onCancelled(@NonNull DatabaseError error) {

                    }
                });


                return binding.getRoot();
            }



        @Override
         public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
            super.onActivityResult(requestCode, resultCode, data);
            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                CropImage.ActivityResult result = CropImage.getActivityResult(data);
                if (resultCode == RESULT_OK) {
                    Uri resultUri = result.getUri();


                    Picasso.get().load(resultUri).fit().centerCrop().into(binding.profilePicImageview);

                    final StorageReference storageRef = firebaseStorage.getReference().child("Profile pictures").child(firebaseAuth.getUid());
                    storageRef.putFile(resultUri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                        @Override
                        public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {

                            storageRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
                                @Override
                                public void onSuccess(Uri uri) {
                                    firebaseDatabase.getReference("Users").child(firebaseAuth.getUid()).child("profilePic").setValue(uri.toString());

                                }
                            });

                        }
                    });


                }
            }

        }
}

RECIEVER-LISTITEM.XML


SENDER-LISTITEM.XML

FCMPUSHNOTIFICATION:
package com.example.chatapp;


import android.app.Activity;
import android.content.Context;
import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import org.json.JSONException;
import org.json.JSONObject;
import java.util.HashMap;
import java.util.Map;


public class FcmNotificationsSender  {

    private final String postUrl = "https://fcm.googleapis.com/fcm/send";
    private final String fcmServerKey ="AAAA5nu0z6g:APA91bG2BDQQZrvxpEDSNrK-QSkpENW6GoGXbsfuwj2SVazM3DLIa4xZP0eRjYYTvjfwZYn1zm8wBoHDiuEg3F59qpRThnOwJku1hA7Kfsw4qynzNJ6e5uO4yFpWYrhHbzDK80Sk2iGc";
    String userFcmToken;
    String title;
    String body;
    Context mContext;
    Activity mActivity;
    private RequestQueue requestQueue;

    public FcmNotificationsSender(String userFcmToken, String title, String body, Context mContext, Activity mActivity) {
        this.userFcmToken = userFcmToken;
        this.title = title;
        this.body = body;
        this.mContext = mContext;
        this.mActivity = mActivity;


    }

    public void SendNotifications() {

        requestQueue = Volley.newRequestQueue(mActivity);
        JSONObject mainObj = new JSONObject();
        try {
            mainObj.put("to", userFcmToken);
            JSONObject notiObject = new JSONObject();
            notiObject.put("title", title);
            notiObject.put("body", body);
            notiObject.put("icon", "icon_for_splash");
            mainObj.put("notification", notiObject);


            JsonObjectRequest request = new JsonObjectRequest(Request.Method.POST, postUrl, mainObj, new Response.Listener<JSONObject>() {
                @Override
                public void onResponse(JSONObject response) {

                    // code run is got response

                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    // code run is got error

                }
            }) {
                @Override
                public Map<String, String> getHeaders() throws AuthFailureError {


                    Map<String, String> header = new HashMap<>();
                    header.put("content-type", "application/json");
                    header.put("authorization", "key=" + fcmServerKey);
                    return header;


                }
            };
            requestQueue.add(request);


        } catch (JSONException e) {
            e.printStackTrace();
        }




    }
}

AESUTILS:
package com.example.chatapp;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class AESUtils
{

    private static final byte[] keyValue =
            new byte[]{'c', 'o', 'd', 'i', 'n', 'g', 'a', 'f', 'f', 'a', 'i', 'r', 's', 'c', 'o', 'm'};


    public static String encrypt(String cleartext)
            throws Exception {
        byte[] rawKey = getRawKey();
        byte[] result = encrypt(rawKey, cleartext.getBytes());
        return toHex(result);
    }

    public static String decrypt(String encrypted)
            throws Exception {

        byte[] enc = toByte(encrypted);
        byte[] result = decrypt(enc);
        return new String(result);
    }

    private static byte[] getRawKey() throws Exception {
        SecretKey key = new SecretKeySpec(keyValue, "AES");
        byte[] raw = key.getEncoded();
        return raw;
    }

    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {
        SecretKey skeySpec = new SecretKeySpec(raw, "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        byte[] encrypted = cipher.doFinal(clear);
        return encrypted;
    }

    private static byte[] decrypt(byte[] encrypted)
            throws Exception {
        SecretKey skeySpec = new SecretKeySpec(keyValue, "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, skeySpec);
        byte[] decrypted = cipher.doFinal(encrypted);
        return decrypted;
    }

    public static byte[] toByte(String hexString) {
        int len = hexString.length() / 2;
        byte[] result = new byte[len];
        for (int i = 0; i < len; i++)
            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),
                    16).byteValue();
        return result;
    }

    public static String toHex(byte[] buf) {
        if (buf == null)
            return "";
        StringBuffer result = new StringBuffer(2 * buf.length);
        for (int i = 0; i < buf.length; i++) {
            appendHex(result, buf[i]);
        }
        return result.toString();
    }

    private final static String HEX = "0123456789ABCDEF";

    private static void appendHex(StringBuffer sb, byte b) {
        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));
    }
}
MAIN-MENU.XML


MESSAGEMODEL:
package models;

public class MessageModel {

    String uId, msgText;
    long msgTime;

    public MessageModel() {
    }

    public MessageModel(long msgTime, String msgText) {
        this.msgTime = msgTime;
        this.msgText = msgText;
    }

    public MessageModel(String uId, String msgText, long msgTime) {
        this.uId = uId;
        this.msgText = msgText;
        this.msgTime = msgTime;
    }

    public String getuId() {
        return uId;
    }

    public void setuId(String uId) {
        this.uId = uId;
    }

    public String getMsgText() {
        return msgText;
    }

    public void setMsgText(String msgText) {
        this.msgText = msgText;
    }

    public long getMsgTime() {
        return msgTime;
    }

    public void setMsgTime(long msgTime) {
        this.msgTime = msgTime;
    }
}

MODELUSER:
package models;

import com.example.chatapp.R;

public class UserModel {

    String profilePic = "R.drawable.user", userName, userMail, userId, userPassword = "null", recentMessage, about, token;
    long  recentMsgTime;

    public UserModel(String profilePic, String userName, String userMail, String userId, String userPassword, String about) {
        this.profilePic = profilePic;
        this.userName = userName;
        this.userMail = userMail;
        this.userId = userId;
        this.userPassword = userPassword;
        this.about = about;
    }


    // For storing in DB
    public UserModel(String userName, String userMail, String userPassword, String profilePic, String about){

        this.profilePic = profilePic;
        this.userName = userName;
        this.userMail = userMail;
        this.userPassword = userPassword;
        this.about = about;


    }


    public UserModel() {
    }

    // for displaying in chats list and search list
    public UserModel(String userName, String userMail, String profilePic) {
        this.userName = userName;
        this.userMail = userMail;
        this.profilePic = profilePic;
    }

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public String getAbout() {
        return about;
    }

    public long getRecentMsgTime() {
        return recentMsgTime;
    }

    public void setRecentMsgTime(long recentMsgTime) {
        this.recentMsgTime = recentMsgTime;
    }

    public void setAbout(String about) {
        this.about = about;
    }

    public String getProfilePic() {
        return profilePic;
    }

    public void setProfilePic(String profilePic) {
        this.profilePic = profilePic;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getUserMail() {
        return userMail;
    }

    public void setUserMail(String userMail) {
        this.userMail = userMail;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getUserPassword() {
        return userPassword;
    }

    public void setUserPassword(String userPassword) {
        this.userPassword = userPassword;
    }


    public String getRecentMessage() {
        return recentMessage;
    }

    public void setRecentMessage(String recentMessage) {
        this.recentMessage = recentMessage;
    }

}